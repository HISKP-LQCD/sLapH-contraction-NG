#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2019 Martin Ueding <dev@martin-ueding.de>

import argparse
import glob
import pprint
import itertools
import json
import os
import re
import sys

import jinja2


srcdir = os.path.dirname(os.path.dirname(__file__))


def available_channels():
    paths = glob.glob(os.path.join(srcdir, 'analytic_projection/driver_*.wl'))
    drivers = []
    for path in paths:
        m = re.match(r'driver_(.*)\.wl', os.path.basename(path))
        if m:
            drivers.append(m.group(1))
    return drivers


def eager_grouped(grouped):
    rval = [(key, list(val)) for key, val in grouped]
    return rval


def make_grouped(pairs, max_momentum_sq):
    extended_pairs = [
        (sum(p**2 for p in momentum), irrep, momentum)
        for momentum, irrep in pairs]
    extended_pairs.sort()

    extended_pairs = [
        elem
        for elem in extended_pairs
        if elem[0] <= max_momentum_sq]

    grouped = itertools.groupby(extended_pairs, lambda x: x[0])
    grouped = eager_grouped(grouped)

    grouped2 = [
        (key, eager_grouped(itertools.groupby([v[1:] for v in value], lambda x: x[0])))
        for key, value in grouped]
    grouped2 = eager_grouped(grouped2)

    return grouped2


def generate_start_script(action, grouped2, env, config_numbers=None):
    if action == 'analytic':
        template = env.get_template('template_submit_analytic_jobs.sh')
        rendered = template.render(grouped2=grouped2)
        with open('jobscripts/submit_analytic_jobs.sh'.format(action), 'w') as f:
            f.write(rendered)

    elif action == 'numeric':
        template = env.get_template('template_submit_numeric_jobs.sh')
        rendered = template.render(config_numbers=config_numbers)
        with open('jobscripts/submit_numeric_jobs.sh', 'w') as f:
            f.write(rendered)


def main(options):
    # Setting up Jinja
    env = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.join(srcdir, 'jobscript_generator')))
    template_analytic = env.get_template('template_slurm_analytic.sh')
    template_numeric = env.get_template('template_slurm_numeric.sh')

    with open(os.path.join(srcdir, 'single_cover', 'irreps_avail.js')) as f:
        pairs = json.load(f)

    os.makedirs('batch_output', exist_ok=True)
    os.makedirs('jobscripts', exist_ok=True)

    grouped2 = make_grouped(pairs, options.max_momentum_sq)

    if options.action == 'analytic':
        generate_start_script(options.action, grouped2, env)

        for momentum_sq, grouped in grouped2:
            for irrep, values in grouped:
                for _, momentum in values:
                    rendered = template_analytic.render(momentum=momentum, irrep=irrep, srcdir=srcdir, channel=options.channel)
                    filename = 'slurm_analytic_{}{}{}_{}.sh'.format(momentum[0], momentum[1], momentum[2], irrep)
                    path = os.path.join('jobscripts', filename)
                    with open(path, "w") as f:
                        f.write(rendered)

    if options.action == 'numeric':
        config_numbers = list(range(options.first, options.last + 1, options.step))
        generate_start_script(options.action, pairs, env, config_numbers)

        for config_number in config_numbers:
            rendered = template_numeric.render(grouped2=grouped2, srcdir=srcdir, config_number=config_number)
            filename = 'slurm_numeric_{:04d}.sh'.format(config_number)
            path = os.path.join('jobscripts', filename)
            with open(path, "w") as f:
                f.write(rendered)


def parse_args():
    parser = argparse.ArgumentParser(description='Creates job scripts for batch processing of analytic and numeric projection. Specify one of the actions and use `--help` to get further information about that particular action.')
    subparsers = parser.add_subparsers(title='actions')

    parser.add_argument('--max_momentum_sq', type=int, default=4)

    channel_help = 'Channel to project. Only one channel can be selected per working directory as all the file names are the same. Available channels are: {}'.format(', '.join(available_channels()))

    analytic = subparsers.add_parser('analytic', help='analytic projection')
    analytic.set_defaults(action='analytic')
    analytic.add_argument('channel', help=channel_help)

    numeric = subparsers.add_parser('numeric', help='numerical projection')
    numeric.set_defaults(action='numeric')
    numeric.add_argument('first', type=int, help='first configuration number')
    numeric.add_argument('last', type=int, help='last configuration number (inclusive)')
    numeric.add_argument('step', type=int, default=1, help='configuration stepping (default: %(default)s)')

    options = parser.parse_args()

    if not 'action' in options:
        parser.print_help()
        sys.exit(1)

    return options


if __name__ == "__main__":
    main(parse_args())
