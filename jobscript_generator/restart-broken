#!/usr/bin/python3

# Copyright Â© 2019 Martin Ueding <dev@martin-ueding.de>

import argparse
import collections
import glob
import os
import re
import subprocess


def extract_number(string):
    m = re.search(r'(\d+)', string)
    assert m
    return int(m.group(0))


def get_running_jobs():
    command = ['squeue', '-o', '%o']
    output = subprocess.run(command, capture_output=True, check=True)
    lines = output.stdout.decode().strip().split('\n')[1:]

    relpaths = [os.path.relpath(path) for path in lines]
    ours = [extract_number(path) for path in relpaths if not path.startswith('..')]

    return sorted(ours)


def main():
    options = parse_args()

    running_jobs = get_running_jobs()

    date_pattern = re.compile('^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\+\d{2}:\d{2}$')
    output_pattern = re.compile('batch_output/numeric_(\d+)_slurm_(\d+).txt')

    broken_hosts = collections.defaultdict(lambda: 0)
    total_hosts = collections.defaultdict(lambda: 0)

    started = 0

    for path in glob.glob('batch_output/numeric_*.txt'):
        with open(path) as f:
            lines = list(f)

            hostname = lines[1].strip()
            total_hosts[hostname] += 1

            m = date_pattern.match(lines[-1])
            if m:
                continue

            broken_hosts[hostname] += 1

            m = output_pattern.match(path)
            assert m
            config = int(m.group(1))
            jobid = int(m.group(2))

            #print(hostname)
            #print(config, jobid)

            if config in running_jobs:
                continue

            jobscript = 'jobscripts/slurm_numeric_{:04d}.sh'.format(config)
            command = ['sbatch']
            if options.x is not None:
                command += ['-x', options.x]
            command += [jobscript]
            print(command)
            if not options.dry:
                subprocess.run(command, check=True)
                started += 1
                if started > options.limit:
                    break

    print('| Host | Broken | Total |')
    print('| --- | ---: | ---: |')
    for host, count in sorted(total_hosts.items()):
        print('| {:15s} | {:3d} | {:3d} |'.format(host, broken_hosts[host], count))


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-x', help='SLURM nodelist')
    parser.add_argument('--dry', action='store_true')
    parser.add_argument('--limit', type=int)
    options = parser.parse_args()

    return options


if __name__ == '__main__':
    main()
